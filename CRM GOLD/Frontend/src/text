'use client';

import React, { useEffect, useRef, useState } from 'react';
import ChatBubble from '../../components/ChatBubble';
import axios from 'axios';
import { PaperAirplaneIcon, ArrowPathIcon, ChevronDownIcon } from '@heroicons/react/24/outline';
import Image from 'next/image';
import { MicrophoneIcon, PaperClipIcon } from '@heroicons/react/24/solid';

const Chat = () => {
  const [messages, setMessages] = useState<{ sender: string; message: string }[]>([]);
  const [userInput, setUserInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showScrollButton, setShowScrollButton] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const chatContainerRef = useRef<HTMLDivElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const editMessageRef = useRef<HTMLDivElement>(null);
  const [isVoiceInputActive, setIsVoiceInputActive] = useState(false);

  useEffect(() => {
    if (editMessageRef.current) {
      editMessageRef.current.scrollIntoView({ behavior: 'smooth', block: 'center' });
      editMessageRef.current = null;
    } else {
      scrollToBottom();
    }
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleScroll = () => {
    const container = chatContainerRef.current;
    if (container) {
      const atBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 50;
      setShowScrollButton(!atBottom);
    }
  };

  const sendMessage = async (messageToSend: string, insertAfterIndex?: number) => {
    const userMessage = { sender: 'user', message: messageToSend };
    const newMessages = [...messages];

    let editScrollIndex = null;

    if (insertAfterIndex !== undefined) {
      newMessages.splice(insertAfterIndex + 1, 0, userMessage);
      editScrollIndex = insertAfterIndex + 1;
    } else {
      newMessages.push(userMessage);
    }

    setMessages(newMessages);

    setIsLoading(true);
    try {
      const res = await axios.post('http://localhost:8000/api/v1/chatbot/chat', {
        message: messageToSend,
      });

      const aiMessage = { sender: 'ai', message: res.data.message };
      setMessages((prev) => {
        const updated = [...prev];
        if (insertAfterIndex !== undefined) {
          updated.splice(insertAfterIndex + 2, 0, aiMessage);
        } else {
          updated.push(aiMessage);
        }
        return updated;
      });

      setTimeout(() => {
        if (editScrollIndex !== null) {
          const bubble = document.getElementById(`msg-${editScrollIndex}`);
          if (bubble) bubble.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }, 100);
    } catch (err) {
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleEditMessage = (text: string, index: number) => {
    sendMessage(text, index + 1);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage(userInput);
      setUserInput('');
    }
  };

  const autoResizeTextarea = () => {
    const textarea = textareaRef.current;
    if (textarea) {
      textarea.style.height = 'auto';
      const newHeight = Math.min(textarea.scrollHeight, 180);
      textarea.style.height = `${newHeight}px`;
      textarea.style.overflowY = newHeight >= 180 ? 'auto' : 'hidden';
    }
  };

  useEffect(() => {
    autoResizeTextarea();
  }, [userInput]);

  const refreshChat = () => {
    setMessages([]);
  };

  const handleVoiceInput = () => {
    const recognition = new (window as any).webkitSpeechRecognition() || new (window as any).SpeechRecognition();
    recognition.lang = 'en-US';
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;
  
    setIsVoiceInputActive(true);
    recognition.start();
  
    recognition.onresult = (event: any) => {
      const transcript = event.results[0][0].transcript;
      setUserInput((prev) => (prev ? prev + ' ' + transcript : transcript));
    };
  
    recognition.onerror = (event: any) => {
      console.error('Speech recognition error:', event.error);
      setIsVoiceInputActive(false);
    };
  
    recognition.onend = () => {
      setIsVoiceInputActive(false);
    };
  };
  
  return (
    <div className="flex flex-col h-screen bg-gray-50">
      {/* Header */}
      <div className="p-4 shadow-sm bg-white border-b border-gray-100">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="flex aspect-square size-8 items-center justify-center rounded-lg text-sidebar-primary-foreground">
              <Image src="/1500px.png" alt="" width={150} height={50} className="w-full h-auto max-w-[150px]" />
            </div>
            <div>
              <h1 className="text-lg font-semibold text-gray-800">AI Assistant</h1>
              <p className="text-xs text-gray-500">{isLoading ? 'Typing...' : 'Online'}</p>
            </div>
          </div>
          <button
            onClick={refreshChat}
            className="text-blue-500 hover:bg-blue-100 p-2 rounded-full transition"
          >
            <ArrowPathIcon className="w-5 h-5" />
          </button>
        </div>
      </div>

      {/* Chat messages */}
      <div
        className="flex-1 overflow-y-auto px-4 py-6"
        ref={chatContainerRef}
        onScroll={handleScroll}
      >
        <div className="max-w-3xl mx-auto w-full">
          {messages.length === 0 ? (
            <div className="flex flex-col items-center justify-center h-[calc(100vh-200px)] text-center text-gray-500">
              <div className="w-16 h-16 mb-4 rounded-full bg-white border border-gray-200 flex items-center justify-center">
                <PaperAirplaneIcon className="w-8 h-8 text-blue-500 transform rotate-45" />
              </div>
              <h3 className="text-lg font-medium mb-1">How can I help you today?</h3>
              <p className="text-sm max-w-md">Ask me anything or share your thoughts. I'm here to assist you.</p>
            </div>
          ) : (
            <>
              {messages.map((msg, i) => (
                <div key={i} id={`msg-${i}`}>
                  <ChatBubble
                    sender={msg.sender as 'user' | 'ai'}
                    message={msg.message}
                    onEdit={msg.sender === 'user' ? (text) => handleEditMessage(text, i) : undefined}
                  />
                </div>
              ))}
              {isLoading && (
                <ChatBubble
                  sender="ai"
                  message={
                    <div className="flex space-x-1 animate-pulse">
                      <div className="w-2 h-2 rounded-full bg-gray-400" />
                      <div className="w-2 h-2 rounded-full bg-gray-400" />
                      <div className="w-2 h-2 rounded-full bg-gray-400" />
                    </div>
                  }
                />
              )}
              <div ref={messagesEndRef} />
            </>
          )}
        </div>
        {showScrollButton && (
          <button
            className="fixed bottom-28 right-6 bg-white border border-gray-300 rounded-full shadow-md p-2 hover:bg-blue-50 transition"
            onClick={scrollToBottom}
          >
            <ChevronDownIcon className="w-5 h-5 text-blue-600" />
          </button>
        )}
      </div>

      {/* Input Section */}
      <div className="p-4 border-t border-gray-200 bg-white">
        <div className="max-w-3xl mx-auto w-full">
          {/* Textarea */}
          <div className="mb-2">
            <textarea
              ref={textareaRef}
              rows={1}
              className="w-full p-4 border border-gray-200 rounded-xl resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              style={{ maxHeight: '180px', minHeight: '44px', overflowY: 'hidden' }}
              placeholder="Type your message..."
              value={userInput}
              onChange={(e) => setUserInput(e.target.value)}
              onKeyDown={handleKeyPress}
            />
          </div>
          
          {/* Action Buttons Footer */}
          <div className="flex items-center justify-between">
            <div className="flex space-x-2">
              
              {/* You can add a file upload button here if needed */}
              <button className="p-2 rounded-full bg-gray-100 text-gray-700 hover:bg-gray-200">
                <PaperClipIcon className="w-5 h-5" />
              </button>
            </div>
            <div className="flex items-center space-x-2">
            <button
                type="button"
                onClick={handleVoiceInput}
                className={`p-2 rounded-full ${
                  isVoiceInputActive ? 'bg-green-500 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}
                title={isVoiceInputActive ? 'Voice input is active' : 'Speak'}
              >
                <MicrophoneIcon className="w-5 h-5" />
              </button>
            <button
              onClick={() => {
                sendMessage(userInput);
                setUserInput('');
              }}
              disabled={isLoading || !userInput.trim()}
              className={`p-2 rounded-full ${
                isLoading || !userInput.trim()
                  ? 'bg-gray-100 text-gray-400'
                  : 'bg-blue-500 text-white hover:bg-blue-600'
              }`}
            >
              <PaperAirplaneIcon className="w-5 h-5" />
            </button>
            
            </div>
          </div>
          
          {/* Voice input status */}
          {isVoiceInputActive && (
            <div className="mt-2 text-center text-sm text-blue-500">
              Listening...
            </div>
          )}
          
          <p className="text-xs text-gray-500 mt-2 text-center">
            AI Assistant may produce inaccurate information. Consider verifying important info.
          </p>
        </div>
      </div>
    </div>
  );
};

export default Chat;








































'use client';

import React, { useEffect, useRef, useState } from 'react';
import ChatBubble from '../../components/ChatBubble';
import axios from 'axios';
import { PaperAirplaneIcon, ArrowPathIcon, ChevronDownIcon } from '@heroicons/react/24/outline';
import Image from 'next/image';

const Chat = () => {
  const [messages, setMessages] = useState<{ sender: string; message: string }[]>([]);
  const [userInput, setUserInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showScrollButton, setShowScrollButton] = useState(false);
  const [scrollLockIndex, setScrollLockIndex] = useState<number | null>(null); // NEW
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const chatContainerRef = useRef<HTMLDivElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const editMessageRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (editMessageRef.current) {
      editMessageRef.current.scrollIntoView({ behavior: 'smooth', block: 'center' });
      editMessageRef.current = null;
    } else if (scrollLockIndex === null) {
      scrollToBottom();
    }
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleScroll = () => {
    const container = chatContainerRef.current;
    if (container) {
      const atBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 50;
      setShowScrollButton(!atBottom);
    }
  };

  const sendMessage = async (messageToSend: string, insertAfterIndex?: number) => {
    const userMessage = { sender: 'user', message: messageToSend };
    const newMessages = [...messages];

    let editScrollIndex: number | null = null;

    if (insertAfterIndex !== undefined) {
      newMessages.splice(insertAfterIndex + 1, 0, userMessage);
      setScrollLockIndex(insertAfterIndex + 1); // LOCK SCROLL
      editScrollIndex = insertAfterIndex + 1;
    } else {
      newMessages.push(userMessage);
      setScrollLockIndex(null); // UNLOCK SCROLL FOR NEW MESSAGES
    }

    setMessages(newMessages);
    setIsLoading(true);

    try {
      const res = await axios.post('http://localhost:8000/api/v1/chatbot/chat', {
        message: messageToSend,
      });

      const aiMessage = { sender: 'ai', message: res.data.message };
      setMessages((prev) => {
        const updated = [...prev];
        if (insertAfterIndex !== undefined) {
          updated.splice(insertAfterIndex + 2, 0, aiMessage);
        } else {
          updated.push(aiMessage);
        }
        return updated;
      });

      setTimeout(() => {
        if (editScrollIndex !== null) {
          const bubble = document.getElementById(`msg-${editScrollIndex}`);
          if (bubble) bubble.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }, 100);
    } catch (err) {
      console.error(err);
    } finally {
      setIsLoading(false);
      setScrollLockIndex(null); // UNLOCK SCROLL AFTER AI RESPONSE
    }
  };

  const handleEditMessage = (text: string, index: number) => {
    sendMessage(text, index + 1);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage(userInput);
      setUserInput('');
    }
  };

  const autoResizeTextarea = () => {
    const textarea = textareaRef.current;
    if (textarea) {
      textarea.style.height = 'auto';
      const newHeight = Math.min(textarea.scrollHeight, 180);
      textarea.style.height = `${newHeight}px`;
      textarea.style.overflowY = newHeight >= 180 ? 'auto' : 'hidden';
    }
  };

  useEffect(() => {
    autoResizeTextarea();
  }, [userInput]);

  const refreshChat = () => {
    setMessages([]);
  };

  return (
    <div className="flex flex-col h-screen bg-gray-50">
      {/* Header */}
      <div className="p-4 shadow-sm bg-white border-b border-gray-100">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="flex aspect-square size-8 items-center justify-center rounded-lg text-sidebar-primary-foreground">
              <Image src="/1500px.png" alt="" width={150} height={50} className="w-full h-auto max-w-[150px]" />
            </div>
            <div>
              <h1 className="text-lg font-semibold text-gray-800">AI Assistant</h1>
              <p className="text-xs text-gray-500">{isLoading ? 'Typing...' : 'Online'}</p>
            </div>
          </div>
          <button
            onClick={refreshChat}
            className="text-blue-500 hover:bg-blue-100 p-2 rounded-full transition"
          >
            <ArrowPathIcon className="w-5 h-5" />
          </button>
        </div>
      </div>

      {/* Chat messages */}
      <div
        className="flex-1 overflow-y-auto px-4 py-6"
        ref={chatContainerRef}
        onScroll={handleScroll}
      >
        <div className="max-w-3xl mx-auto w-full">
          {messages.length === 0 ? (
            <div className="flex flex-col items-center justify-center h-[calc(100vh-200px)] text-center text-gray-500">
              <div className="w-16 h-16 mb-4 rounded-full bg-white border border-gray-200 flex items-center justify-center">
                <PaperAirplaneIcon className="w-8 h-8 text-blue-500 transform rotate-45" />
              </div>
              <h3 className="text-lg font-medium mb-1">How can I help you today?</h3>
              <p className="text-sm max-w-md">Ask me anything or share your thoughts. I'm here to assist you.</p>
            </div>
          ) : (
            <>
              {messages.map((msg, i) => (
                <div key={i} id={`msg-${i}`}>
                  <ChatBubble
                    sender={msg.sender as 'user' | 'ai'}
                    message={msg.message}
                    onEdit={msg.sender === 'user' ? (text) => handleEditMessage(text, i) : undefined}
                  />
                </div>
              ))}
              {isLoading && (
                <ChatBubble
                  sender="ai"
                  message={
                    <div className="flex space-x-1 animate-pulse">
                      <div className="w-2 h-2 rounded-full bg-gray-400" />
                      <div className="w-2 h-2 rounded-full bg-gray-400" />
                      <div className="w-2 h-2 rounded-full bg-gray-400" />
                    </div>
                  }
                />
              )}
              <div ref={messagesEndRef} />
            </>
          )}
        </div>
        {showScrollButton && (
          <button
            className="fixed bottom-28 right-6 bg-white border border-gray-300 rounded-full shadow-md p-2 hover:bg-blue-50 transition"
            onClick={scrollToBottom}
          >
            <ChevronDownIcon className="w-5 h-5 text-blue-600" />
          </button>
        )}
      </div>

      {/* Input */}
      <div className="p-4">
        <div className="max-w-3xl mx-auto w-full">
          <div className="relative">
            <textarea
              ref={textareaRef}
              rows={1}
              className="w-full p-4 pr-12 border border-gray-200 rounded-xl resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              style={{ maxHeight: '180px', minHeight: '44px', overflowY: 'hidden' }}
              placeholder="Type your message..."
              value={userInput}
              onChange={(e) => setUserInput(e.target.value)}
              onKeyDown={handleKeyPress}
            />
            <button
              onClick={() => {
                sendMessage(userInput);
                setUserInput('');
              }}
              disabled={isLoading || !userInput.trim()}
              className={`absolute right-3 bottom-3 p-2 rounded-full ${
                isLoading || !userInput.trim()
                  ? 'text-gray-400'
                  : 'text-white bg-blue-500 hover:bg-blue-600'
              }`}
            >
              <PaperAirplaneIcon className="w-5 h-7" />
            </button>
          </div>
          <p className="text-xs text-gray-500 mt-2 text-center">
            AI Assistant may produce inaccurate information. Consider verifying important info.
          </p>
        </div>
      </div>
    </div>
  );
};

export default Chat;









































'use client';

import React, { useEffect, useRef, useState } from 'react';
import ChatBubble from '../../components/ChatBubble';
import axios from 'axios';
import { PaperAirplaneIcon, ArrowPathIcon, ChevronDownIcon, XMarkIcon, PlusIcon  } from '@heroicons/react/24/outline';
import Image from 'next/image';
import { MicrophoneIcon, PaperClipIcon } from '@heroicons/react/24/solid';

declare global {
  interface Window {
    SpeechRecognition: new () => SpeechRecognition;
    webkitSpeechRecognition: new () => SpeechRecognition;
  }
}

interface SpeechRecognition extends EventTarget {
  continuous: boolean;
  interimResults: boolean;
  lang: string;
  onstart: (() => void) | null;
  onresult: ((event: any) => void) | null;
  onerror: ((event: any) => void) | null;
  onend: (() => void) | null;
  start: () => void;
  stop: () => void;
}

interface UploadedFile {
  id: string;
  name: string;
  type: 'image' | 'file';
  url: string;
  preview?: string;
}

const Chat = () => {
  const [messages, setMessages] = useState<{ sender: string; message: string }[]>([]);
  const [userInput, setUserInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showScrollButton, setShowScrollButton] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const chatContainerRef = useRef<HTMLDivElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const editMessageRef = useRef<HTMLDivElement>(null);
  const [isVoiceInputActive, setIsVoiceInputActive] = useState(false);
  const [recordingTime, setRecordingTime] = useState(0);
  const recordingIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const recognitionRef = useRef<SpeechRecognition | null>(null);
  const [scrollLockIndex, setScrollLockIndex] = useState<number | null>(null);
  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([]);
  const fileInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (editMessageRef.current) {
      editMessageRef.current.scrollIntoView({ behavior: 'smooth', block: 'center' });
      editMessageRef.current = null;
    } else if (scrollLockIndex === null) {
      scrollToBottom(); 
    }
  }, [messages]);
  

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleScroll = () => {
    const container = chatContainerRef.current;
    if (container) {
      const atBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 50;
      setShowScrollButton(!atBottom);
    }
  };

  const sendMessage = async (messageToSend: string, insertAfterIndex?: number) => {
    const userMessage = { sender: 'user', message: messageToSend };
    const newMessages = [...messages];
  
    let editScrollIndex = null;
  
    if (insertAfterIndex !== undefined) {
      newMessages.splice(insertAfterIndex + 1, 0, userMessage);
      setScrollLockIndex(insertAfterIndex + 1);
      editScrollIndex = insertAfterIndex + 1;
    } else {
      newMessages.push(userMessage);
      setScrollLockIndex(null); // allow scroll to bottom
    }    
  
    setMessages(newMessages);
  
    // 🔽 Save user message to backend
    try {
      await axios.post('http://localhost:8000/api/v1/chatMessages/messages', {
        sender: 'user',
        content: messageToSend,
      });
    } catch (err) {
      console.error('Error saving user message:', err);
    }
  
    setIsLoading(true);
    try {
      const res = await axios.post('http://localhost:8000/api/v1/chatbot/chat', {
        message: messageToSend,
      });
  
      const aiReply = res.data.message;
      const aiMessage = { sender: 'ai', message: aiReply };
  
      setMessages((prev) => {
        const updated = [...prev];
        if (insertAfterIndex !== undefined) {
          updated.splice(insertAfterIndex + 2, 0, aiMessage);
        } else {
          updated.push(aiMessage);
        }
        return updated;
      });
  
      // 🔽 Save AI response to backend
      try {
        await axios.post('http://localhost:8000/api/v1/chatMessages/messages', {
          sender: 'ai',
          content: aiReply,
        });
      } catch (err) {
        console.error('Error saving AI message:', err);
      }
  
      setTimeout(() => {
        if (editScrollIndex !== null) {
          const bubble = document.getElementById(`msg-${editScrollIndex}`);
          if (bubble) bubble.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }, 100);
    } catch (err) {
      console.error('AI API error:', err);
    } finally {
      setIsLoading(false);
    }
  };  

  const handleEditMessage = (text: string, index: number) => {
    editMessageRef.current = document.getElementById(`msg-${index + 2}`) as HTMLDivElement | null;
    sendMessage(text, index + 1);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage(userInput);
      setUserInput('');
    }
  };

  const autoResizeTextarea = () => {
    const textarea = textareaRef.current;
    if (textarea) {
      textarea.style.height = 'auto';
      const newHeight = Math.min(textarea.scrollHeight, 180);
      textarea.style.height = `${newHeight}px`;
      textarea.style.overflowY = newHeight >= 180 ? 'auto' : 'hidden';
    }
  };

  useEffect(() => {
    autoResizeTextarea();
  }, [userInput]);

  const refreshChat = () => {
    setMessages([]);
  };

  const startRecordingTimer = () => {
    setRecordingTime(0);
    recordingIntervalRef.current = setInterval(() => {
      setRecordingTime(prev => prev + 1);
    }, 1000);
  };

  const stopRecordingTimer = () => {
    if (recordingIntervalRef.current) {
      clearInterval(recordingIntervalRef.current);
      recordingIntervalRef.current = null;
    }
    setRecordingTime(0);
  };

  const handleVoiceInput = () => {
    if (isVoiceInputActive) {
      if (recognitionRef.current) {
        recognitionRef.current.stop();
      }
      setIsVoiceInputActive(false);
      stopRecordingTimer();
      return;
    }
  
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) {
      alert('Speech recognition not supported in your browser');
      return;
    }
  
    recognitionRef.current = new SpeechRecognition();
    recognitionRef.current.continuous = true;
    recognitionRef.current.interimResults = true;
    recognitionRef.current.lang = 'en-US';
  
    recognitionRef.current.onstart = () => {
      setIsVoiceInputActive(true);
      startRecordingTimer();
    };
  
    recognitionRef.current.onresult = (event: any) => {
      const transcript = Array.from(event.results)
        .map((result: any) => result[0])
        .map((result) => result.transcript)
        .join('');
      setUserInput(transcript);
    };
  
    recognitionRef.current.onerror = (event: any) => {
      setIsVoiceInputActive(false);
      stopRecordingTimer();
    };
  
    recognitionRef.current.onend = () => {
      setIsVoiceInputActive(false);
      stopRecordingTimer();
    };
  
    recognitionRef.current.start();
  };

  useEffect(() => {
    return () => {
      if (recognitionRef.current) {
        recognitionRef.current.stop();
      }
      if (recordingIntervalRef.current) {
        clearInterval(recordingIntervalRef.current);
      }
    };
  }, []);

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (!files) return;
  
    const newFiles: UploadedFile[] = [];
    
    Array.from(files).forEach((file) => {
      // Skip files larger than 100MB
      if (file.size > 100 * 1024 * 1024) {
        alert(`File ${file.name} is too large (max 100MB)`);
        return;
      }
      
      // Skip if we already have 50 files
      if (uploadedFiles.length + newFiles.length >= 50) {
        alert('Maximum 50 files allowed');
        return;
      }
  
      const fileType = file.type.startsWith('image/') ? 'image' : 'file';
      const fileId = Date.now().toString() + Math.random().toString(36).substring(2);
      const fileUrl = URL.createObjectURL(file);
      
      newFiles.push({
        id: fileId,
        name: file.name,
        type: fileType,
        url: fileUrl,
        preview: fileType === 'image' ? fileUrl : undefined
      });
    });
  
    setUploadedFiles(prev => [...prev, ...newFiles]);
    if (fileInputRef.current) fileInputRef.current.value = '';
  };
  
  const removeFile = (id: string) => {
    setUploadedFiles(prev => prev.filter(file => file.id !== id));
  };
  
  const handleSendWithFiles = () => {
    if (isVoiceInputActive && recognitionRef.current) {
      recognitionRef.current.stop();
    }
  
    // Create a message that includes both text and files
    const messageContent = {
      text: userInput,
      files: uploadedFiles
    };
  
    sendMessage(JSON.stringify(messageContent));
    setUserInput('');
    setUploadedFiles([]);
  };

  return (
    <div className="flex flex-col h-screen bg-gray-50">
      {/* Header */}
      <div className="p-4 shadow-sm bg-white border-b border-gray-100">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="flex aspect-square size-8 items-center justify-center rounded-lg text-sidebar-primary-foreground">
              <Image src="/logo.png" alt="" width={150} height={50} className="w-full h-auto max-w-[150px]" />
            </div>
            <div>
              <h1 className="text-lg font-semibold text-gray-800">AI Assistant</h1>
              <p className="text-xs text-gray-500">{isLoading ? 'Typing...' : 'Online'}</p>
            </div>
          </div>
          <button
            onClick={refreshChat}
            className="text-blue-500 hover:bg-blue-100 p-2 rounded-full transition"
          >
            <ArrowPathIcon className="w-5 h-5" />
          </button>
        </div>
      </div>

      {/* Chat messages */}
      <div
        className="flex-1 overflow-y-auto px-4 py-6"
        ref={chatContainerRef}
        onScroll={handleScroll}
      >
        <div className="max-w-3xl mx-auto w-full">
          {messages.length === 0 ? (
            <div className="flex flex-col items-center justify-center h-[calc(100vh-200px)] text-center text-gray-500">
              <div className="w-16 h-16 mb-4 rounded-full bg-white border border-gray-200 flex items-center justify-center">
                <PaperAirplaneIcon className="w-8 h-8 text-blue-500 transform rotate-45" />
              </div>
              <h3 className="text-lg font-medium mb-1">How can I help you today?</h3>
              <p className="text-sm max-w-md">Ask me anything or share your thoughts. I'm here to assist you.</p>
            </div>
          ) : (
            <>
              {messages.map((msg, i) => (
                <div key={i} id={`msg-${i}`}>
                  <ChatBubble
                    sender={msg.sender as 'user' | 'ai'}
                    message={msg.message}
                    onEdit={msg.sender === 'user' ? (text) => handleEditMessage(text, i) : undefined}
                  />
                </div>
              ))}
              {isLoading && (
                <ChatBubble
                  sender="ai"
                  message={
                    <div className="flex space-x-1 animate-pulse">
                      <div className="w-2 h-2 rounded-full bg-gray-400" />
                      <div className="w-2 h-2 rounded-full bg-gray-400" />
                      <div className="w-2 h-2 rounded-full bg-gray-400" />
                    </div>
                  }
                />
              )}
              <div ref={messagesEndRef} />
            </>
          )}
        </div>
        {showScrollButton && (
          <button
            className="fixed bottom-28 right-6 bg-white border border-gray-300 rounded-full shadow-md p-2 hover:bg-blue-50 transition"
            onClick={scrollToBottom}
          >
            <ChevronDownIcon className="w-5 h-5 text-blue-600" />
          </button>
        )}
      </div>


      {/* User input */}
      <div className="p-4 border-t border-gray-200 bg-white">
        <div className="max-w-3xl mx-auto w-full">
          <div className="mb-2">
            {uploadedFiles.length > 0 && (
              <div className="mb-3 p-3 bg-gray-50 rounded-lg border border-gray-200">
                <div className="flex flex-wrap gap-2">
                  {uploadedFiles.map((file) => (
                    <div key={file.id} className="relative group">
                      {file.type === 'image' ? (
                        <div className="relative w-20 h-20 rounded-md overflow-hidden border border-gray-200">
                          <img 
                            src={file.preview} 
                            alt={file.name}
                            className="w-full h-full object-cover"
                          />
                          <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-50 transition-all duration-200 flex items-center justify-center opacity-0 group-hover:opacity-100">
                            <span className="text-white text-xs text-center p-1 break-all">{file.name}</span>
                          </div>
                        </div>
                      ) : (
                        <div className="relative w-40 p-2 bg-white rounded-md border border-gray-200 flex items-center group">
                          <div className="w-6 h-6 bg-gray-100 rounded flex items-center justify-center mr-2">
                            <PaperClipIcon className="w-3 h-3 text-gray-500" />
                          </div>
                          <span className="text-xs truncate">{file.name}</span>
                          <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-50 transition-all duration-200 flex items-center justify-center opacity-0 group-hover:opacity-100">
                            <span className="text-white text-xs text-center p-1 break-all">{file.name}</span>
                          </div>
                        </div>
                      )}
                      <button
                        onClick={() => removeFile(file.id)}
                        className="absolute -top-2 -right-2 bg-gray-200 rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity"
                      >
                        <XMarkIcon className="w-3 h-3 text-gray-700" />
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            )}
            <textarea
              ref={textareaRef}
              rows={1}
              className="w-full p-4 border border-gray-200 rounded-xl resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              style={{ maxHeight: '180px', minHeight: '44px', overflowY: 'hidden' }}
              placeholder="Type your message..."
              value={userInput}
              onChange={(e) => setUserInput(e.target.value)}
              onKeyDown={handleKeyPress}
            />
          </div>
          
          <div className="flex items-center justify-between">
            {/* Update the file input section  */}
            <div className="flex space-x-2">
              <div className="relative group">
                <button 
                  onClick={() => fileInputRef.current?.click()}
                  className="p-2 rounded-full bg-gray-100 text-gray-700 hover:bg-gray-200 relative"
                  title="Text extraction only. Upload files and more (Max 50, 100MB each)"
                >
                  <PlusIcon className="w-5 h-5" />
                </button>
                {/* File selection menu */}
                <div className="hidden group-hover:block absolute bottom-full left-0 mb-2 w-48 bg-white rounded-md shadow-lg z-10 border border-gray-200">
                  <div className="py-1">
                    <label className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 cursor-pointer">
                      <input
                        type="file"
                        ref={fileInputRef}
                        onChange={handleFileUpload}
                        className="hidden"
                        multiple
                        accept="image/*"
                      />
                      Upload Image
                    </label>
                    <label className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 cursor-pointer">
                      <input
                        type="file"
                        ref={fileInputRef}
                        onChange={handleFileUpload}
                        className="hidden"
                        multiple
                        accept=".pdf,.doc,.docx,.txt"
                      />
                      Upload File
                    </label>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="flex items-center space-x-2">
              {isVoiceInputActive && (
                <div className="flex items-center text-sm text-red-500">
                  <span className="mr-2">{formatTime(recordingTime)}</span>
                  <div className="w-3 h-3 rounded-full bg-red-500 animate-pulse"></div>
                </div>
              )}
              <button
                onClick={handleVoiceInput}
                className={`p-2 rounded-full ${
                  isVoiceInputActive 
                    ? 'bg-red-500 text-white hover:bg-red-600' 
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}
                title={isVoiceInputActive ? 'Stop recording' : 'Start recording'}
              >
                <MicrophoneIcon className="w-5 h-5" />
              </button>
              <button
                onClick={handleSendWithFiles}
                disabled={isLoading || (!userInput.trim() && uploadedFiles.length === 0)}
                className={`p-2 rounded-full ${
                  isLoading || (!userInput.trim() && uploadedFiles.length === 0)
                    ? 'bg-gray-100 text-gray-400'
                    : 'bg-blue-500 text-white hover:bg-blue-600'
                }`}
              >
                <PaperAirplaneIcon className="w-5 h-5" />
              </button>
            </div>
          </div>
             
          <p className="text-xs text-gray-500 mt-2 text-center">
            AI Assistant may produce inaccurate information. Consider verifying important info.
          </p>
        </div>
      </div>
    </div>
  );

  function formatTime(seconds: number) {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
  }
};

export default Chat;

















const MAX_TEXT_LENGTH = 10000; // ~10k characters
const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB